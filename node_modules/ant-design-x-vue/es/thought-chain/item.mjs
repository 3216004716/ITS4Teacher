import { defineComponent as S, mergeDefaults as L, computed as e, useId as A, createVNode as a, mergeProps as F, withDirectives as O, vShow as w } from "vue";
import { a as D, c as n } from "../attachments/Attachments2.mjs";
import H from "../_util/pick-attrs.mjs";
import { useThoughtChainNodeContextInject as I } from "./context.mjs";
import { Avatar as K, Typography as g } from "ant-design-vue";
import "../transition-collapse/index.mjs";
import { L as V, R as j } from "../attachments/FileList/FileList2.mjs";
import X from "../transition-collapse/TransitionCollapse.mjs";
const U = /* @__PURE__ */ S({
  name: "AXThoughtChainNode",
  __name: "item",
  props: L({
    info: null,
    nextStatus: null,
    onClick: {
      type: Function
    }
  }, {
    info: () => ({})
  }),
  setup(t) {
    const i = D(t, ["info", "nextStatus", "onClick"]), k = e(() => H(i, {
      attr: !0,
      aria: !0,
      data: !0
    })), o = I(), h = e(() => o.value.prefixCls), c = e(() => o.value.enableCollapse), N = e(() => o.value.expandedKeys), v = e(() => o.value.direction), r = e(() => o.value.classNames), d = e(() => o.value.styles), b = A(), x = e(() => t.info.key ?? b), T = e(() => t.info.icon), C = e(() => t.info.title), $ = e(() => t.info.extra), u = e(() => t.info.content), y = e(() => t.info.footer), p = e(() => t.info.status), m = e(() => t.info.description), l = e(() => `${h.value}-item`), P = () => {
      var s;
      return (s = t.onClick) == null ? void 0 : s.call(t, x.value);
    }, f = e(() => {
      var s;
      return (s = N.value) == null ? void 0 : s.includes(x.value);
    }), R = e(() => c.value ? f.value : !0);
    return () => a("div", F(k.value, {
      class: n(l.value, {
        [`${l.value}-${p.value}${t.nextStatus ? `-${t.nextStatus}` : ""}`]: p.value
      }, i.class),
      style: i.style
    }), [a("div", {
      class: n(`${l.value}-header`, r.value.itemHeader),
      style: d.value.itemHeader,
      onClick: P
    }, [a(K, {
      icon: T.value,
      class: `${l.value}-icon`
    }, null), a("div", {
      class: n(`${l.value}-header-box`, {
        [`${l.value}-collapsible`]: c.value && u.value
      })
    }, [a(g.Text, {
      strong: !0,
      ellipsis: {
        tooltip: {
          placement: v.value === "rtl" ? "topRight" : "topLeft",
          title: C.value
        }
      },
      class: `${l.value}-title`
    }, {
      default: () => [c.value && u.value && (v.value === "rtl" ? a(V, {
        class: `${l.value}-collapse-icon`,
        rotate: f.value ? -90 : 0
      }, null) : a(j, {
        class: `${l.value}-collapse-icon`,
        rotate: f.value ? 90 : 0
      }, null)), C.value]
    }), m.value && a(g.Text, {
      class: `${l.value}-desc`,
      ellipsis: {
        tooltip: {
          placement: v.value === "rtl" ? "topRight" : "topLeft",
          title: m.value
        }
      },
      type: "secondary"
    }, {
      default: () => [m.value]
    })]), $.value && a("div", {
      class: `${l.value}-extra`
    }, [$.value])]), a(X, {
      prefixCls: h.value
    }, {
      default: () => [u.value && O(a("div", {
        class: n(`${l.value}-content`)
      }, [a("div", {
        class: n(`${l.value}-content-box`, r.value.itemContent),
        style: d.value.itemContent
      }, [u.value])]), [[w, R.value]])]
    }), y.value && a("div", {
      class: n(`${l.value}-footer`, r.value.itemFooter),
      style: d.value.itemFooter
    }, [y.value])]);
  }
});
export {
  U as default
};
