import { defineComponent as y, toRef as P, computed as l, createVNode as t, mergeProps as h } from "vue";
import { a as $, c as O } from "../attachments/Attachments2.mjs";
import T from "../_util/pick-attrs.mjs";
import { Tooltip as E, Typography as M, Dropdown as p, Menu as w } from "ant-design-vue";
import c from "../_util/hooks/use-state.mjs";
import { E as I } from "../attachments/FileList/FileList2.mjs";
const L = /* @__PURE__ */ y({
  name: "AXConversationsItem",
  __name: "ConversationsItem",
  props: {
    info: null,
    prefixCls: null,
    direction: null,
    menu: null,
    active: {
      type: Boolean
    },
    onClick: {
      type: Function
    }
  },
  setup(e) {
    const s = $(e, ["prefixCls", "info", "class", "direction", "onClick", "active", "menu"]);
    P(e, "class");
    const u = l(() => T(s, {
      aria: !0,
      data: !0,
      attr: !0
    })), f = (n) => {
      n.stopPropagation();
    }, i = l(() => e.info.disabled), [m, d] = c(!1), [g, r] = c(!1), v = l(() => O(e.class, `${e.prefixCls}-item`, {
      [`${e.prefixCls}-item-active`]: e.active && !i.value
    }, {
      [`${e.prefixCls}-item-disabled`]: i.value
    })), C = () => {
      !i.value && e.onClick && e.onClick(e.info);
    }, x = (n) => {
      n && r(!n);
    }, o = l(() => {
      var n;
      return (n = e.menu) == null ? void 0 : n.trigger;
    }), b = l(() => {
      const {
        trigger: n,
        ...a
      } = e.menu || {};
      return a;
    }), k = (n) => {
      const a = t(I, {
        onClick: f,
        class: `${e.prefixCls}-menu-icon`
      }, null);
      return o.value ? typeof o.value == "function" ? o.value(n, {
        originNode: a
      }) : o.value : a;
    };
    return () => t(E, {
      title: e.info.label,
      open: m.value && g.value,
      onOpenChange: r,
      placement: e.direction === "rtl" ? "left" : "right"
    }, {
      default: () => [t("li", h(u.value, {
        class: v.value,
        onClick: C
      }), [e.info.icon && t("div", {
        class: `${e.prefixCls}-icon`
      }, [e.info.icon]), t(M.Text, {
        class: `${e.prefixCls}-label`,
        ellipsis: {
          onEllipsis: d
        }
      }, {
        default: () => [e.info.label]
      }), !i.value && e.menu && t(p, {
        placement: e.direction === "rtl" ? "bottomLeft" : "bottomRight",
        trigger: ["click"],
        disabled: i.value,
        onOpenChange: x
      }, {
        default: () => k(e.info),
        overlay: () => t(w, b.value, null)
      })])]
    });
  }
});
export {
  L as default
};
