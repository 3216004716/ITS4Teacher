import { computed as s, unref as e, watch as f } from "vue";
import { useEventCallback as c } from "../../_util/hooks/use-event-callback.mjs";
import d from "../../_util/hooks/use-state.mjs";
function h(a) {
  const [r, o] = d(a.value.length), t = s(() => a.value.slice(0, e(r))), i = s(() => {
    const l = e(t)[e(t).length - 1];
    return l ? l.key : null;
  });
  f(
    a,
    () => {
      var l;
      if (!(e(t).length && e(t).every((n, y) => {
        var u;
        return n.key === ((u = a.value[y]) == null ? void 0 : u.key);
      }))) {
        if (e(t).length === 0)
          o(1);
        else
          for (let n = 0; n < e(t).length; n += 1)
            if (e(t)[n].key !== ((l = a.value[n]) == null ? void 0 : l.key)) {
              o(n);
              break;
            }
      }
    },
    { immediate: !0, deep: !0 }
  );
  const p = c((l) => {
    l === e(i) && o(e(r) + 1);
  });
  return [t, p];
}
export {
  h as default
};
